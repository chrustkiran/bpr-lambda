org: bprbackend
app: bpr-lambda
service: bpr-lambda

plugins:
  - serverless-offline
  - serverless-dynamodb-local

custom:
  accountId: '123'   #here set ${aws:accountId} when deploying
  authorizer:
    test:
      name: bprJwtAuthorizer
    prod:
      name: bprJwtAuthorizer
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      seed: true
      migrate: true
      inMemory: true
    seed:
      dev:
        sources:
          - table: CustomersTable_bpr_${sls:stage}
            sources: [db-migration/users.json]
          - table: VehiclesTable_bpr_${sls:stage}
            sources: [db-migration/vehicles.json]
    options:
      endpoint: http://localhost:8000

provider:
  name: aws
  runtime: nodejs20.x
  stage: dev
  region: ap-southeast-2
  environment:
      STAGE: ${sls:stage}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:PutItem"
        - "dynamodb:Get*"
        - "dynamodb:Scan*"
        - "dynamodb:Query*"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"
      Resource: arn:aws:dynamodb:${aws:region}:${self:custom.accountId}:table/*_bpr_${sls:stage}
  httpApi:
    authorizers:
      bprJwtAuthorizer:
        type: jwt
        identitySource: $request.header.Authorization
        issuerUrl: https://cognito-idp.${aws:region}.amazonaws.com/ap-southeast-2_rl44Okg3d
        audience:
          - 7k4cdppukqbvgrgb1jh48k534q
          - k9pr9eh64r68ndppebgdbj136
    cors:
      allowedOrigins:
        - '*'
      allowedHeaders:
        - Content-Type
        - Authorization
      allowedMethods:
        - GET
        - POST
        - DELETE
        - PATCH
        - PUT
      allowCredentials: true
      exposedResponseHeaders:
        - Special-Response-Header
      maxAge: 6000 # In seconds
functions:
  searchCustomer:
    handler: src/controllers/customerController.searchCustomer
    events:
      - httpApi:
          path: /customer/search
          method: post
          authorizer: ${self:custom.authorizer.${sls:stage}, null}
  getAllCustomers:
    handler: src/controllers/customerController.getAllCustomers
    events: 
      - httpApi:
          path: /customers
          method: get
          authorizer: ${self:custom.authorizer.${sls:stage}, null}
  createCustomers:
    handler: src/controllers/customerController.createCustomers
    events: 
      - httpApi:
          path: /customers
          method: post
          authorizer: ${self:custom.authorizer.${sls:stage}, null}
  getCustomerById:
    handler: src/controllers/customerController.getCustomerByCustomerId
    events: 
      - httpApi:
          path: /customer/{customerId}
          method: get
          authorizer: ${self:custom.authorizer.${sls:stage}, null}
  modifyCustomer:
    handler: src/controllers/customerController.modifyCustomer
    events: 
      - httpApi:
          path: /customer/{customerId}
          method: put
          authorizer: ${self:custom.authorizer.${sls:stage}, null}
  ######################## VEHICLE ##########################
  getAllVehicles:
    handler: src/controllers/vehicleController.getAllVehicles
    events:
      - httpApi:
          path: /customers/{customerId}/vehicles
          method: get
          authorizer: ${self:custom.authorizer.${sls:stage}, null}
  createVehicle:
    handler: src/controllers/vehicleController.createVehicle
    events: 
      - httpApi:
          path: /customers/{customerId}/vehicle
          method: post
          authorizer: ${self:custom.authorizer.${sls:stage}, null}
  getVehicleDetails:
    handler: src/controllers/vehicleController.getVehicleDetails
    events: 
      - httpApi:
          path: /vehicles/{vehicleId}
          method: get
          authorizer: ${self:custom.authorizer.${sls:stage}, null}
  updateVehicle:
    handler: src/controllers/vehicleController.updateVehicle
    events: 
      - httpApi:
          path: /vehicles/{vehicleId}
          method: put
          authorizer: ${self:custom.authorizer.${sls:stage}, null}
  removeVehicle:
    handler: src/controllers/vehicleController.removeVehicle
    events: 
      - httpApi:
          path: /vehicles/{vehicleId}
          method: delete
          authorizer: ${self:custom.authorizer.${sls:stage}, null}
resources:
  Resources:
     UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: CustomersTable_bpr_${sls:stage}
        AttributeDefinitions:
          - AttributeName: CustomerID
            AttributeType: S
          - AttributeName: FirstName
            AttributeType: S
          - AttributeName: LastName
            AttributeType: S
          - AttributeName: PhoneNumber
            AttributeType: S 
        KeySchema:
          - AttributeName: CustomerID
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: FirstNameIndex
            KeySchema:
              - AttributeName: FirstName
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 10
              WriteCapacityUnits: 5
          - IndexName: LastNameIndex
            KeySchema:
              - AttributeName: LastName
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 10
              WriteCapacityUnits: 5
          - IndexName: PhoneNumberIndex
            KeySchema:
              - AttributeName: PhoneNumber
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 10
              WriteCapacityUnits: 5
        ProvisionedThroughput:
              ReadCapacityUnits: 10
              WriteCapacityUnits: 5
     VehiclesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: VehiclesTable_bpr_${sls:stage}
        AttributeDefinitions:
          - AttributeName: VehicleID
            AttributeType: S
          - AttributeName: CustomerID
            AttributeType: S
        KeySchema:
          - AttributeName: VehicleID
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: CustomerIDIndex
            KeySchema:
              - AttributeName: CustomerID
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 10
              WriteCapacityUnits: 5
        ProvisionedThroughput:
              ReadCapacityUnits: 10
              WriteCapacityUnits: 5
     InvoiceTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: InvoicesTable_bpr_${sls:stage}
        AttributeDefinitions:
          - AttributeName: InvoiceNumber
            AttributeType: S
          - AttributeName: Type
            AttributeType: S
          - AttributeName: VehicleID
            AttributeType: S
        KeySchema:
          - AttributeName: InvoiceNumber
            KeyType: HASH
          - AttributeName: Type
            KeyType: SORT
        GlobalSecondaryIndexes:
          - IndexName: VehicleIDIndex
            KeySchema:
              - AttributeName: VehicleID
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 10
              WriteCapacityUnits: 5
        ProvisionedThroughput:
              ReadCapacityUnits: 10
              WriteCapacityUnits: 5